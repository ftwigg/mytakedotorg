apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-gradle-plugin'

repositories {
	maven { url 'https://plugins.gradle.org/m2/' }
	// TODO: when jsweet releases jsweet-candy-generator, we should switch to libs-release-local
	// to ensure that builds stay forever repeatable
	//maven { url 'http://repository.jsweet.org/artifactory/libs-release-local' }
	maven { url 'http://repository.jsweet.org/artifactory/libs-snapshot-local' }
}

dependencies {
	// https://github.com/opentable/otj-pg-embedded
	compile 'com.opentable.components:otj-pg-embedded:0.10.0'
	// jooq codegen
	compile 'org.jooq:jooq-codegen:3.10.1'
	// db migration
	compile 'org.flywaydb:flyway-core:4.2.0'
	// jsweet ts2java
	compile 'org.jsweet:jsweet-candy-generator:+'
	// java8 utilities
	compile 'com.diffplug.durian:durian-core:1.2.0'
}

// if we're not in CI, grab all source
String HEROKU_ENV_VAR = 'STACK'  // https://devcenter.heroku.com/articles/buildpack-api#stacks
String CI_ENV_VAR = 'CI'  // https://circleci.com/docs/1.0/environment-variables/#basics
def keys = System.getenv().keySet()

if (!keys.contains(HEROKU_ENV_VAR) && !keys.contains(CI_ENV_VAR)) {
	// uncomment to generate eclipse project
	// (adds tons of noise to continuous build)
	build.dependsOn(tasks.getByName('eclipse'))
}

eclipse { project { name = 'mytake-buildSrc' } }

gradlePlugin {
	plugins {
		flywayJooqEmbeddedPg {
			id = 'org.mytake.gradle.flywayjooq.embeddedpg'
			implementationClass = 'org.mytake.gradle.flywayjooq.EmbeddedPgPlugin'
		}
		live {
			id = 'org.mytake.gradle.live'
			implementationClass = 'org.mytake.gradle.live.LivePlugin'
		}
	}
}
