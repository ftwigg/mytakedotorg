plugins {
	id 'com.moowork.node' version '1.2.0' // https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
	id 'com.moowork.gulp' version '1.2.0' // https://github.com/srs/gradle-node-plugin/blob/master/docs/gulp.md
}

apply plugin: 'java'

////////////////
// node stuff //
////////////////
node {
	version = '6.10.2'
	npmVersion = '5.4.2'
	// yarnVersion = '0.16.1'
	download = true
}

// prep needs to run before anything else, but is easy to do up-to-date checking on
npm_run_prep.dependsOn 'npmInstall'
npm_run_prep.inputs.file('gulpfile.js')
npm_run_prep.inputs.file('loaders/tsconfig.json')
npm_run_prep.inputs.dir('loaders/src')
npm_run_prep.outputs.dir('loaders/dist')
npm_run_prep.inputs.file('test/scripts/tsconfig.json')
npm_run_prep.inputs.dir('test/scripts/src')
npm_run_prep.outputs.dir('test/scripts/dist')

// make the gulp_buildProd have accurate up-to-date checking
def setInputs(targetTask) {
	targetTask.dependsOn npm_run_prep
	def inputs = [
		'assets',
		'src/main/typescript',
		'gulpfile.js',
		'postcss.config.js',
		'tsconfig.json',
		'webpack.config.dev.js',
		'webpack.config.js'
	]
	for (input in inputs) {
		File file = file(input)
		if (file.isFile()) {
			targetTask.inputs.file(file)
		} else {
			targetTask.inputs.dir(file)
		}
	}
}
setInputs(gulp_buildDev)
setInputs(gulp_buildProd)
gulp_buildDev.outputs.dir('src/main/resources/assets-dev')
gulp_buildProd.outputs.dir('src/main/resources/assets')

// map prettier to spotless (to match server)
setInputs(npm_run_formatlist)
setInputs(npm_run_formatwrite)
task spotlessCheck(dependsOn: npm_run_formatlist)
task spotlessApply(dependsOn: npm_run_formatwrite)

// check should run all tests
npm_run_test.dependsOn(npm_run_prep)
check.dependsOn(npm_run_test)
check.dependsOn(spotlessCheck)

////////////////
// java stuff //
////////////////
repositories { maven { url 'http://repository.jsweet.org/artifactory/libs-release-local' } }
dependencies { compile 'org.jsweet:jsweet-core:5-20170726' }

apply plugin: 'eclipse'
eclipse { project { name = 'mytake-client' } }
sourceSets.main.java {
	srcDir 'src/main/typescript'
	srcDir 'src/main/ts2java'
}

// generate java files for the typescript in the server folder
task ts2java(type: org.mytake.gradle.ts2java.Ts2JavaTask) {
	input = file('src/main/typescript/server')
	output = file('src/main/ts2java')
	pkg = 'json'
}
compileJava.dependsOn(ts2java)

// make sure that the gulp tasks are run
processResources.dependsOn(gulp_buildProd)
if (!Env.isHeroku()) {
	processResources.dependsOn(gulp_buildDev)
}
