buildscript {
	repositories {
		maven {
			url "http://repository.jsweet.org/artifactory/libs-release-local"
			allowInsecureProtocol true
			content {
				includeGroup 'org.jsweet'
				includeGroup 'org.jsweet.ext'
			}
		}
		maven {
			url "http://repository.jsweet.org/artifactory/plugins-release-local"
			allowInsecureProtocol true
			content { includeGroup 'org.jsweet' }
		}
	}
	// https://github.com/lgrignon/jsweet-gradle-plugin/blob/master/src/main/java/org/jsweet/gradle/JSweetPluginExtension.java
	dependencies { classpath 'org.jsweet:jsweet-gradle-plugin:2.3.7' }
}
plugins {
	id 'com.diffplug.eclipse.excludebuildfolder'
}

////////////////////////////////////////
// java - gets compiled to typescript //
////////////////////////////////////////
apply plugin: 'java'
apply plugin: 'com.diffplug.gradle.spotless'
String VER_PRETTIER = '1.13.4'	// this version is old, but newer versions move periods after </a> tag, seems like a bug
// the bug keeping us on this old version is still present as of 1.19.1: https://github.com/prettier/prettier/blob/master/CHANGELOG.md
spotless {
	java {
		target 'src/main/java/java2ts/**'
		licenseHeaderFile(rootProject.file('gradle/spotless.license.java'))
		importOrder()
		eclipse().configFile(rootProject.file('gradle/spotless.eclipseformat.xml'))
		removeUnusedImports()
	}
	format 'scss', {
		target 'src/main/styles/**/*.scss'
		prettier(VER_PRETTIER).config(['parser': 'css'])
	}
	format 'typescript', {
		target fileTree('src/main/scripts') {
			include '**'
			exclude 'java2ts/**'
		}
		prettier(VER_PRETTIER).config(['parser': 'typescript'])
	}
	format 'js', {
		target 'gulpfile.js'
		prettier(VER_PRETTIER).config(['parser': 'typescript'])
	}
}

repositories {
	mavenCentral()
	maven {
		url "http://repository.jsweet.org/artifactory/libs-release-local"
		allowInsecureProtocol true
		content {
			includeGroup 'org.jsweet'
			includeGroup 'org.jsweet.ext'
		}
	}
}
dependencies {
	implementation "com.jsoniter:jsoniter:$JSONITER_VER"
	implementation "org.jsweet:jsweet-core:$JSWEET_CORE_VER"
	testImplementation "junit:junit:$JUNIT_VER"
	testImplementation "org.assertj:assertj-core:$ASSERTJ_VER"
}

// don't setup any of the node stuff if we're just doing the transcriptGui
if (gradle.startParameter.taskNames == [
	'transcriptGui'
]) {
	return
}

// generate typescript for the java in the java2ts folder
def JAVA2TS = 'src/main/scripts/java2ts'
apply plugin: 'org.jsweet.jsweet-gradle-plugin'
jsweet {
	module = 'commonjs'
	tsOut = file(JAVA2TS)
	tsOnly = true
	factoryClassName = 'org.mytake.gradle.java2ts.MytakeJsweetFactory'
	includes= [
		'java2ts/**'
	]
}
tasks.jsweet.doFirst { delete JAVA2TS }
tasks.jsweet.doLast { com.diffplug.gradle.FileMisc.flatten(file(JAVA2TS + '/java2ts')) }
tasks.jsweet.inputs.dir(file('build/classes'))
tasks.jsweet.outputs.dir(file(JAVA2TS))
clean { delete JAVA2TS }

//////////////
// jsoniter //
//////////////
apply plugin: 'org.mytake.gradle.jsonitercodegen'
jsoniterCodegen { codegenClass = 'java2ts.CodegenConfig' }

///////////////////////////////////////////////////////////////////////
// node stuff - compiles sass and typescript into src/main/resources //
///////////////////////////////////////////////////////////////////////
apply plugin: 'org.mytake.gradle.node'
node {
	setup.nodeVersion = 'v8.15.1'
	setup.npmVersion = 'provided'

	check.dependsOn npmRun('test') {
		dependsOn('jsweet')
		inputs.dir('src/main/scripts')
	}

	// every gulp task automatically installs from package-lock.json using 'npm ci'
	// and adds that and gulpfile.js as input files
	gulp 'permanent', {
		inputs.dir('src/main/permanent').withPathSensitivity(PathSensitivity.RELATIVE)
		outputs.dir('src/main/resources/assets/permanent')
		// technically it's that scriptsDev and scriptsProd depend on jsweet, but it's easier to put it here
		dependsOn('jsweet')
	}
	for (t in [
		'styles',
		'scripts'
	]) {
		final String taskName = t
		gulp "${taskName}Dev", {
			dependsOn 'gulp_permanent'
			inputs.dir("src/main/${taskName}").withPathSensitivity(PathSensitivity.RELATIVE)
			if (taskName == 'scripts') {
				inputs.file('tsconfig.json').withPathSensitivity(PathSensitivity.RELATIVE)
			}
			outputs.dir("src/main/resources/assets-dev/${taskName}")
		}
		gulp "${taskName}Prod", {
			dependsOn 'gulp_permanent'
			inputs.dir("src/main/${taskName}").withPathSensitivity(PathSensitivity.RELATIVE)
			if (taskName == 'scripts') {
				inputs.file('tsconfig.json').withPathSensitivity(PathSensitivity.RELATIVE)
			}
			outputs.dir("src/main/resources/assets/${taskName}")

		}
	}
	gulp 'revProd', {
		dependsOn 'gulp_stylesProd', 'gulp_scriptsProd'
		inputs.file('src/main/resources/assets/styles/manifest.json').withPathSensitivity(PathSensitivity.RELATIVE)
		inputs.file('src/main/resources/assets/scripts/manifest.json').withPathSensitivity(PathSensitivity.RELATIVE)
		outputs.file('src/main/resources/assets/manifest.json')
	}
}
clean {
	delete 'src/main/resources/assets'
	delete 'src/main/resources/assets-dev'
}

// make sure that all the gulp tasks are run
processResources {
	dependsOn 'gulp_stylesDev', 'gulp_scriptsDev', 'gulp_revProd'
}

// on Heroku, we can ignore the dev tasks
if (buildsrc.Env.isHeroku()) {
	gulp_stylesDev.enabled = false
	gulp_scriptsDev.enabled = false
}
gradle.taskGraph.whenReady { taskGraph ->
	boolean disableProd = false
	if (taskGraph.hasTask(':server:runDev')) {
		disableProd = true
	}
	if (taskGraph.hasTask(':server:live')) {
		disableProd = true
		gulp_scriptsDev.enabled = false
	}
	if (disableProd) {
		gulp_revProd.enabled = false
		gulp_stylesProd.enabled = false
		gulp_scriptsProd.enabled = false
	}
}

clean { delete 'src/main/resources' }

// make sure that all the gulp tasks are run
processResources.dependsOn([
	gulp_stylesDev,
	gulp_scriptsDev,
	gulp_revProd
])
// on Heroku, we can ignore the dev tasks
if (buildsrc.Env.isHeroku()) {
	gulp_stylesDev.enabled = false
	gulp_scriptsDev.enabled = false
}
gradle.taskGraph.whenReady { taskGraph ->
	boolean disableProd = false
	if (taskGraph.hasTask(':server:runDev')) {
		disableProd = true
	}
	if (taskGraph.hasTask(':server:live')) {
		disableProd = true
		gulp_scriptsDev.enabled = false
	}
	if (disableProd) {
		gulp_revProd.enabled = false
		gulp_stylesProd.enabled = false
		gulp_scriptsProd.enabled = false
	}
}
