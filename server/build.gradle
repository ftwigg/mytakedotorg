plugins {
	id 'nu.studer.rocker' version '0.3.1'					// https://github.com/etiennestuder/gradle-rocker-plugin
	id 'com.github.johnrengelman.shadow' version '2.0.3'	// http://imperceptiblethoughts.com/shadow/#
}

apply plugin: 'java'
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
	java {
		target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
		licenseHeaderFile(rootProject.file('gradle/spotless.license.java'))
		importOrder()
		eclipse().configFile(rootProject.file('gradle/spotless.eclipseformat.xml'))
		removeUnusedImports()
		// see common.IpGetter
		custom 'useIpGetter', {
			if (it.contains('req.ip()') && !it.contains('interface IpGetter {')) {
				throw new Error('Use IpGetter instead of Request.ip()')
			}
		}
	}
}

////////////////
// flywayJooq //
////////////////
apply plugin: 'org.mytake.gradle.flywayjooq.embeddedpg'
flywayJooqEmbeddedPg {
	dockerComposeFile = file('src/test/resources/docker-compose.yml')
	migrations = file('src/main/resources/db/migration')
	generator {
		database.inputSchema = 'public'
		generate.pojos = true
		generate.fluentSetters = true
		target.packageName = 'db'
		target.directory = file('src/main/jooq-generated').absolutePath
	}
	// https://www.jooq.org/doc/latest/manual/code-generation/custom-data-type-bindings/
	forcedType {
		userType = 'java.lang.String'
		binding = 'db.bindings.PostgresJsonStringBinding'
		expression = '.*'
		types = 'jsonb'
	}
	forcedType {
		userType = 'java.lang.String'
		binding = 'db.bindings.PostgresInetBinding'
		expression = '.*'
		types = 'inet'
	}
	connectionParams = file('build/pgConnection.properties')
	schemaDump = file('build/schema.sql')
}
// because docker-compose can't start postgres on Heroku
if (Env.isHeroku()) {
	tasks.jooq.enabled = false
}

sourceSets.main.java {
	srcDir 'src/main/jooq-generated'
	srcDir 'src/main/rocker'
	srcDir 'src/main/jsoniter-generated'
}

////////////
// rocker //
////////////
rockerVersion = '0.22.0'
rocker {
	main {
		// if these change, also change DevHotReload
		optimize = Env.isHerokuOrCI()
		templateDir = file('src/main/rocker')
		outputDir = file('src/main/rocker-generated')
		extendsModelClass = 'common.CustomRockerModel'
		extendsClass = 'common.CustomRockerTemplate'
	}
}

// enforce tab indentation on rocker files
spotless {
	format 'rocker', {
		target 'src/main/rocker/**/*.rocker.html'
		indentWithTabs(2)
		trimTrailingWhitespace()
		endWithNewline()
	}
}

//////////////////
// normal stuff //
//////////////////
tasks.eclipse.dependsOn([
	tasks.cleanEclipse,
	'jooq',
	'compileRocker'
])

repositories {
	mavenCentral()
	maven { url 'https://dl.bintray.com/palantir/releases' }
	maven { url 'http://repository.jsweet.org/artifactory/libs-release-local' }
}

dependencies {
	String JOOBY_VER = '1.3.0'
	// jooby
	compile "org.jooby:jooby-netty:$JOOBY_VER"
	compile "org.jooby:jooby-rocker:$JOOBY_VER"
	compile "org.jooby:jooby-jooq:$JOOBY_VER"
	compile "org.jooby:jooby-commons-email:$JOOBY_VER"
	compile "org.jooby:jooby-assets:$JOOBY_VER"
	compile "org.jooby:jooby-quartz:$JOOBY_VER"
	testCompile "org.jooby:jooby-whoops:$JOOBY_VER"

	// json
	compile "com.jsoniter:jsoniter:$JSONITER_VER"
	compile "org.jsweet:jsweet-core:$JSWEET_CORE_VER"
	compile project(':client')
	compile project(':foundation')
	compile project(':lucene')

	// jooq (version is set by jooq DSL)
	compile 'org.jooq:jooq'

	// db connector for postgres
	compile 'org.postgresql:postgresql:42.2.2'
	jooqRuntime 'org.postgresql:postgresql:42.2.2'

	// flyway
	compile 'org.flywaydb:flyway-core:5.0.7'

	// common libs
	compile 'commons-validator:commons-validator:1.6'
	compile 'com.diffplug.durian:durian-core:1.2.0'

	// code quality annotations, especially @Nullable
	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
	compileOnly 'com.google.errorprone:error_prone_annotations:2.2.0'

	testCompile "junit:junit:$JUNIT_VER"
	testCompile "org.assertj:assertj-core:$ASSERTJ_VER"
	testCompile 'io.rest-assured:rest-assured:3.0.7'
	testCompile 'com.icegreen:greenmail:1.5.7'									// http://www.icegreen.com/greenmail/
	testCompile 'com.palantir.docker.compose:docker-compose-rule-core:0.33.0'	// https://github.com/palantir/docker-compose-rule
	testCompile 'com.palantir.docker.compose:docker-compose-rule-junit4:0.33.0'	// https://github.com/palantir/docker-compose-rule

	testCompile "com.fizzed:rocker-compiler:${rockerVersion}"					// required for hotreload

	// dep for auth
	compile 'com.auth0:java-jwt:3.3.0'
}
sourceSets {
	test.compileClasspath += configurations.compileOnly
	test.runtimeClasspath += configurations.compileOnly
}

task runProd(type: JavaExec, dependsOn: classes) {
	description = 'Run app in prod mode'
	classpath = sourceSets.main.runtimeClasspath
	main = 'common.Prod'
	if (project.hasProperty('DATABASE_URL')) {
		environment('DATABASE_URL', project.getProperty('DATABASE_URL'))
	}
	if (project.hasProperty('SPARKPOST_APIKEY')) {
		environment('SPARKPOST_APIKEY', project.getProperty('SPARKPOST_APIKEY'))
	}
	args = [
		'prod'
	]
}

// see common.DevHotReload in an IDE for faster dev
task runDev(type: JavaExec, dependsOn: testClasses) {
	description = 'Run app in dev mode'
	classpath = sourceSets.test.runtimeClasspath
	main = 'common.Dev'
	args = [
		'dev'
	]
}

/////////////
// fat jar //
/////////////
shadowJar {}
