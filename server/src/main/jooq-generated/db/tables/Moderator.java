/*
 * This file is generated by jOOQ.
*/
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.tables.records.ModeratorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Moderator extends TableImpl<ModeratorRecord> {

    private static final long serialVersionUID = 148624282;

    /**
     * The reference instance of <code>public.moderator</code>
     */
    public static final Moderator MODERATOR = new Moderator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModeratorRecord> getRecordType() {
        return ModeratorRecord.class;
    }

    /**
     * The column <code>public.moderator.id</code>.
     */
    public final TableField<ModeratorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.moderator</code> table reference
     */
    public Moderator() {
        this(DSL.name("moderator"), null);
    }

    /**
     * Create an aliased <code>public.moderator</code> table reference
     */
    public Moderator(String alias) {
        this(DSL.name(alias), MODERATOR);
    }

    /**
     * Create an aliased <code>public.moderator</code> table reference
     */
    public Moderator(Name alias) {
        this(alias, MODERATOR);
    }

    private Moderator(Name alias, Table<ModeratorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Moderator(Name alias, Table<ModeratorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MODERATOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ModeratorRecord> getPrimaryKey() {
        return Keys.MODERATOR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ModeratorRecord>> getKeys() {
        return Arrays.<UniqueKey<ModeratorRecord>>asList(Keys.MODERATOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Moderator as(String alias) {
        return new Moderator(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Moderator as(Name alias) {
        return new Moderator(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderator rename(String name) {
        return new Moderator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderator rename(Name name) {
        return new Moderator(name, null);
    }
}
