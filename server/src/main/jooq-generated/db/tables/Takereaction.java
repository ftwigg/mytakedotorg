/*
 * This file is generated by jOOQ.
*/
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.bindings.PostgresInetBinding;
import db.enums.Reaction;
import db.tables.records.TakereactionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Takereaction extends TableImpl<TakereactionRecord> {

    private static final long serialVersionUID = -886174775;

    /**
     * The reference instance of <code>public.takereaction</code>
     */
    public static final Takereaction TAKEREACTION = new Takereaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TakereactionRecord> getRecordType() {
        return TakereactionRecord.class;
    }

    /**
     * The column <code>public.takereaction.take_id</code>.
     */
    public final TableField<TakereactionRecord, Integer> TAKE_ID = createField("take_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.takereaction.user_id</code>.
     */
    public final TableField<TakereactionRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.takereaction.kind</code>.
     */
    public final TableField<TakereactionRecord, Reaction> KIND = createField("kind", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(db.enums.Reaction.class), this, "");

    /**
     * The column <code>public.takereaction.reacted_at</code>.
     */
    public final TableField<TakereactionRecord, Timestamp> REACTED_AT = createField("reacted_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.takereaction.reacted_ip</code>.
     */
    public final TableField<TakereactionRecord, String> REACTED_IP = createField("reacted_ip", org.jooq.impl.DefaultDataType.getDefaultDataType("inet"), this, "", new PostgresInetBinding());

    /**
     * Create a <code>public.takereaction</code> table reference
     */
    public Takereaction() {
        this(DSL.name("takereaction"), null);
    }

    /**
     * Create an aliased <code>public.takereaction</code> table reference
     */
    public Takereaction(String alias) {
        this(DSL.name(alias), TAKEREACTION);
    }

    /**
     * Create an aliased <code>public.takereaction</code> table reference
     */
    public Takereaction(Name alias) {
        this(alias, TAKEREACTION);
    }

    private Takereaction(Name alias, Table<TakereactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Takereaction(Name alias, Table<TakereactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAKEREACTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TakereactionRecord> getPrimaryKey() {
        return Keys.TAKEREACTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TakereactionRecord>> getKeys() {
        return Arrays.<UniqueKey<TakereactionRecord>>asList(Keys.TAKEREACTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TakereactionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TakereactionRecord, ?>>asList(Keys.TAKEREACTION__TAKEREACTION_TAKE_ID_FKEY, Keys.TAKEREACTION__TAKEREACTION_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Takereaction as(String alias) {
        return new Takereaction(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Takereaction as(Name alias) {
        return new Takereaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Takereaction rename(String name) {
        return new Takereaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Takereaction rename(Name name) {
        return new Takereaction(name, null);
    }
}
