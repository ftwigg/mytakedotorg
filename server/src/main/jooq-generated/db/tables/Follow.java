/*
 * This file is generated by jOOQ.
*/
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.tables.records.FollowRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Follow extends TableImpl<FollowRecord> {

    private static final long serialVersionUID = -2114294168;

    /**
     * The reference instance of <code>public.follow</code>
     */
    public static final Follow FOLLOW = new Follow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FollowRecord> getRecordType() {
        return FollowRecord.class;
    }

    /**
     * The column <code>public.follow.author</code>.
     */
    public final TableField<FollowRecord, Integer> AUTHOR = createField("author", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.follow.follower</code>.
     */
    public final TableField<FollowRecord, Integer> FOLLOWER = createField("follower", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.follow.followed_at</code>.
     */
    public final TableField<FollowRecord, Timestamp> FOLLOWED_AT = createField("followed_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.follow</code> table reference
     */
    public Follow() {
        this(DSL.name("follow"), null);
    }

    /**
     * Create an aliased <code>public.follow</code> table reference
     */
    public Follow(String alias) {
        this(DSL.name(alias), FOLLOW);
    }

    /**
     * Create an aliased <code>public.follow</code> table reference
     */
    public Follow(Name alias) {
        this(alias, FOLLOW);
    }

    private Follow(Name alias, Table<FollowRecord> aliased) {
        this(alias, aliased, null);
    }

    private Follow(Name alias, Table<FollowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FOLLOW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FollowRecord> getPrimaryKey() {
        return Keys.FOLLOW_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FollowRecord>> getKeys() {
        return Arrays.<UniqueKey<FollowRecord>>asList(Keys.FOLLOW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FollowRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FollowRecord, ?>>asList(Keys.FOLLOW__FOLLOW_AUTHOR_FKEY, Keys.FOLLOW__FOLLOW_FOLLOWER_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Follow as(String alias) {
        return new Follow(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Follow as(Name alias) {
        return new Follow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(String name) {
        return new Follow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Follow rename(Name name) {
        return new Follow(name, null);
    }
}
